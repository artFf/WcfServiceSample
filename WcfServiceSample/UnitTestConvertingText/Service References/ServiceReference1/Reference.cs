//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTestConvertingText.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IConvertingText")]
    public interface IConvertingText {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertingText/GetTextInUpperCase", ReplyAction="http://tempuri.org/IConvertingText/GetTextInUpperCaseResponse")]
        string GetTextInUpperCase(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertingText/GetTextInUpperCase", ReplyAction="http://tempuri.org/IConvertingText/GetTextInUpperCaseResponse")]
        System.Threading.Tasks.Task<string> GetTextInUpperCaseAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertingText/GetTextInLowerCase", ReplyAction="http://tempuri.org/IConvertingText/GetTextInLowerCaseResponse")]
        string GetTextInLowerCase(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertingText/GetTextInLowerCase", ReplyAction="http://tempuri.org/IConvertingText/GetTextInLowerCaseResponse")]
        System.Threading.Tasks.Task<string> GetTextInLowerCaseAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertingText/GetReverseText", ReplyAction="http://tempuri.org/IConvertingText/GetReverseTextResponse")]
        string GetReverseText(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertingText/GetReverseText", ReplyAction="http://tempuri.org/IConvertingText/GetReverseTextResponse")]
        System.Threading.Tasks.Task<string> GetReverseTextAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertingText/GetSplitText", ReplyAction="http://tempuri.org/IConvertingText/GetSplitTextResponse")]
        string[] GetSplitText(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConvertingText/GetSplitText", ReplyAction="http://tempuri.org/IConvertingText/GetSplitTextResponse")]
        System.Threading.Tasks.Task<string[]> GetSplitTextAsync(string text);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConvertingTextChannel : UnitTestConvertingText.ServiceReference1.IConvertingText, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertingTextClient : System.ServiceModel.ClientBase<UnitTestConvertingText.ServiceReference1.IConvertingText>, UnitTestConvertingText.ServiceReference1.IConvertingText {
        
        public ConvertingTextClient() {
        }
        
        public ConvertingTextClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConvertingTextClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConvertingTextClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConvertingTextClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetTextInUpperCase(string text) {
            return base.Channel.GetTextInUpperCase(text);
        }
        
        public System.Threading.Tasks.Task<string> GetTextInUpperCaseAsync(string text) {
            return base.Channel.GetTextInUpperCaseAsync(text);
        }
        
        public string GetTextInLowerCase(string text) {
            return base.Channel.GetTextInLowerCase(text);
        }
        
        public System.Threading.Tasks.Task<string> GetTextInLowerCaseAsync(string text) {
            return base.Channel.GetTextInLowerCaseAsync(text);
        }
        
        public string GetReverseText(string text) {
            return base.Channel.GetReverseText(text);
        }
        
        public System.Threading.Tasks.Task<string> GetReverseTextAsync(string text) {
            return base.Channel.GetReverseTextAsync(text);
        }
        
        public string[] GetSplitText(string text) {
            return base.Channel.GetSplitText(text);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSplitTextAsync(string text) {
            return base.Channel.GetSplitTextAsync(text);
        }
    }
}
